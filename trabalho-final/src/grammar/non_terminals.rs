#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum NonTerminal {
  Allocexpression,
  Atribstat,
  Atribstatevalue,
  Constant,
  ConstIndex,
  Elsestat,
  Elsestat1,
  Expression,
  Expression1,
  Factor,
  Forstat,
  Funccall,
  Funcdef,
  Funclist,
  Ifstat,
  Lvalue,
  Numexpression,
  Numexpression1,
  OpExpression,
  OpNumexpression,
  OpTerm,
  Paramlist,
  Paramlistcall,
  Paramlistcall1,
  Paramlist1,
  Printstat,
  Program,
  Readstat,
  Returnstat,
  Statelist,
  Statelist1,
  Statement,
  Term,
  Term1,
  Unaryexpression,
  Vardecl,
  VarIndex,
}

impl NonTerminal {
  pub fn from_str(s: &str) -> Result<Self, Box<dyn std::error::Error>> {
    match s {
      "Allocexpression" => Ok(NonTerminal::Allocexpression),
      "Atribstat" => Ok(NonTerminal::Atribstat),
      "Atribstatevalue" => Ok(NonTerminal::Atribstatevalue),
      "Constant" => Ok(NonTerminal::Constant),
      "ConstIndex" => Ok(NonTerminal::ConstIndex),
      "Elsestat" => Ok(NonTerminal::Elsestat),
      "Elsestat1" => Ok(NonTerminal::Elsestat1),
      "Expression" => Ok(NonTerminal::Expression),
      "Expression1" => Ok(NonTerminal::Expression1),
      "Factor" => Ok(NonTerminal::Factor),
      "Forstat" => Ok(NonTerminal::Forstat),
      "Funccall" => Ok(NonTerminal::Funccall),
      "Funcdef" => Ok(NonTerminal::Funcdef),
      "Funclist" => Ok(NonTerminal::Funclist),
      "Ifstat" => Ok(NonTerminal::Ifstat),
      "Lvalue" => Ok(NonTerminal::Lvalue),
      "Numexpression" => Ok(NonTerminal::Numexpression),
      "Numexpression1" => Ok(NonTerminal::Numexpression1),
      "OpExpression" => Ok(NonTerminal::OpExpression),
      "OpNumexpression" => Ok(NonTerminal::OpNumexpression),
      "OpTerm" => Ok(NonTerminal::OpTerm),
      "Paramlist" => Ok(NonTerminal::Paramlist),
      "Paramlistcall" => Ok(NonTerminal::Paramlistcall),
      "Paramlistcall1" => Ok(NonTerminal::Paramlistcall1),
      "Paramlist1" => Ok(NonTerminal::Paramlist1),
      "Printstat" => Ok(NonTerminal::Printstat),
      "Program" => Ok(NonTerminal::Program),
      "Readstat" => Ok(NonTerminal::Readstat),
      "Returnstat" => Ok(NonTerminal::Returnstat),
      "Statelist" => Ok(NonTerminal::Statelist),
      "Statelist1" => Ok(NonTerminal::Statelist1),
      "Statement" => Ok(NonTerminal::Statement),
      "Term" => Ok(NonTerminal::Term),
      "Term1" => Ok(NonTerminal::Term1),
      "Unaryexpression" => Ok(NonTerminal::Unaryexpression),
      "Vardecl" => Ok(NonTerminal::Vardecl),
      "VarIndex" => Ok(NonTerminal::VarIndex),
      _ => Err("Invalid non-terminal".into()),
    }
  }
}
