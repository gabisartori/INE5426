// Esse arquivo foi gerado automaticamente pelo script scripts/consistency.py
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum NonTerminal {
  Allocexpression,
  Atribstat,
  Atribstatevalue,
  Constant,
  ConstIndex,
  Elsestat,
  Elsestat1,
  Expression,
  Expression1,
  Factor,
  Forstat,
  Funccall,
  Funcdef,
  Funclist,
  Ifstat,
  Lvalue,
  Numexpression,
  Numexpression1,
  OpExpression,
  OpNumexpression,
  OpTerm,
  Paramlist,
  Paramlistcall,
  Paramlistcall1,
  Paramlist1,
  Printstat,
  Program,
  Readstat,
  Returnstat,
  Statelist,
  Statelist1,
  Statement,
  Term,
  Term1,
  Unaryexpression,
  Vardecl,
  VarIndex,
}

impl NonTerminal {
  pub fn from_str(s: &str) -> Result<Self, Box<dyn std::error::Error>> {
    match s {
      "ALLOCEXPRESSION" => Ok(NonTerminal::Allocexpression),
      "ATRIBSTAT" => Ok(NonTerminal::Atribstat),
      "ATRIBSTATEVALUE" => Ok(NonTerminal::Atribstatevalue),
      "CONSTANT" => Ok(NonTerminal::Constant),
      "CONST_INDEX" => Ok(NonTerminal::ConstIndex),
      "ELSESTAT" => Ok(NonTerminal::Elsestat),
      "ELSESTAT_1" => Ok(NonTerminal::Elsestat1),
      "EXPRESSION" => Ok(NonTerminal::Expression),
      "EXPRESSION_1" => Ok(NonTerminal::Expression1),
      "FACTOR" => Ok(NonTerminal::Factor),
      "FORSTAT" => Ok(NonTerminal::Forstat),
      "FUNCCALL" => Ok(NonTerminal::Funccall),
      "FUNCDEF" => Ok(NonTerminal::Funcdef),
      "FUNCLIST" => Ok(NonTerminal::Funclist),
      "IFSTAT" => Ok(NonTerminal::Ifstat),
      "LVALUE" => Ok(NonTerminal::Lvalue),
      "NUMEXPRESSION" => Ok(NonTerminal::Numexpression),
      "NUMEXPRESSION_1" => Ok(NonTerminal::Numexpression1),
      "OP_EXPRESSION" => Ok(NonTerminal::OpExpression),
      "OP_NUMEXPRESSION" => Ok(NonTerminal::OpNumexpression),
      "OP_TERM" => Ok(NonTerminal::OpTerm),
      "PARAMLIST" => Ok(NonTerminal::Paramlist),
      "PARAMLISTCALL" => Ok(NonTerminal::Paramlistcall),
      "PARAMLISTCALL_1" => Ok(NonTerminal::Paramlistcall1),
      "PARAMLIST_1" => Ok(NonTerminal::Paramlist1),
      "PRINTSTAT" => Ok(NonTerminal::Printstat),
      "PROGRAM" => Ok(NonTerminal::Program),
      "READSTAT" => Ok(NonTerminal::Readstat),
      "RETURNSTAT" => Ok(NonTerminal::Returnstat),
      "STATELIST" => Ok(NonTerminal::Statelist),
      "STATELIST_1" => Ok(NonTerminal::Statelist1),
      "STATEMENT" => Ok(NonTerminal::Statement),
      "TERM" => Ok(NonTerminal::Term),
      "TERM_1" => Ok(NonTerminal::Term1),
      "UNARYEXPRESSION" => Ok(NonTerminal::Unaryexpression),
      "VARDECL" => Ok(NonTerminal::Vardecl),
      "VAR_INDEX" => Ok(NonTerminal::VarIndex),
      _ => Err("Invalid non-terminal".into()),
    }
  }
}
