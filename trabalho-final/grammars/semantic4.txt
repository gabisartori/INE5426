EXPRESSION -> NUMEXPRESSION EXPRESSION_1
    EXPRESSION_1.inh = NUMEXPRESSION.tipo

EXPRESSION_1 -> OP_EXPRESSION NUMEXPRESSION
    EXPRESSION_1.val = NUMEXPRESSION.tipo == EXPRESSION_1.inh

OP_EXPRESSION -> ==
    OP_EXPRESSION.funcao = equal
OP_EXPRESSION -> !=
    OP_EXPRESSION.funcao = not_equal
OP_EXPRESSION -> >=
    OP_EXPRESSION.funcao = great_equal
OP_EXPRESSION -> >
    OP_EXPRESSION.funcao = great_than
OP_EXPRESSION -> <=
    OP_EXPRESSION.funcao = less_equal
OP_EXPRESSION -> <
    OP_EXPRESSION.funcao = less_than

EXPRESSION_1 -> ''
    EXPRESSION_1.val = EXPRESSION_1.inh



NUMEXPRESSION -> TERM NUMEXPRESSION_1
    NUMEXPRESSION_1.inh = TERM.tipo

NUMEXPRESSION_1 -> OP_NUMEXPRESSION TERM NUMEXPRESSION_1
    NUMEXPRESSION_1.val = TERM.tipo == NUMEXPRESSION_1.inh

OP_NUMEXPRESSION -> +
    OP_NUMEXPRESSION.funcao = sum
OP_NUMEXPRESSION -> -
    OP_NUMEXPRESSION.funcao = sub

NUMEXPRESSION_1 -> ''
    NUMEXPRESSION_1.val = NUMEXPRESSION_1.inh



TERM -> UNARYEXPRESSION TERM_1
    TERM_1.inh = UNARYEXPRESSION.tipo
    
TERM_1 -> OP_TERM UNARYEXPRESSION TERM_1
    TERM_1.val = UNARYEXPRESSION.tipo == TERM_1.inh

OP_TERM -> *
    OP_TERM.funcao = mult
OP_TERM -> /
    OP_TERM.funcao = division
OP_TERM -> %
    OP_TERM.funcao = modular

TERM_1 -> ''
    TERM_1.val = TERM_1.inh


UNARYEXPRESSION -> FACTOR
    UNARYEXPRESSION.tipo = FACTOR.tipo

UNARYEXPRESSION -> OP_NUMEXPRESSION FACTOR
    UNARYEXPRESSION.tipo = FACTOR.tipo

FACTOR -> CONSTANT
    FACTOR.tipo = CONSTANT.tipo

FACTOR -> LVALUE
    FACTOR.tipo = LVALUE.tipo

FACTOR -> lparenthesis NUMEXPRESSION rparenthesis
    FACTOR.tipo = EXPRESSION.tipo


LVALUE -> id VAR_INDEX
    LVALUE.tipo = getTipo(id.nome)

CONSTANT -> const_int
    CONSTANT.tipo = int

CONSTANT -> const_float
    CONSTANT.tipo = float

CONSTANT -> const_string
    CONSTANT.tipo = string

CONSTANT -> const_null
    CONSTANT.tipo = null
